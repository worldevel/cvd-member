version: "3.3"

services:
  cvd-member-strapi:
    container_name: cvd-member-strapi
    build: 
      context: ./backend
      dockerfile: Dockerfile.Development
    restart: unless-stopped
    # env_file:
    #   - .env
    environment:
      - DATABASE_CLIENT=${DATABASE_CLIENT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PORT=${DATABASE_PORT}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - NODE_ENV=${NODE_ENV}
      - APP_KEYS=${APP_KEYS}
      - API_TOKEN_SALT=${API_TOKEN_SALT}
    links:
      - cvd-member-database:cvd-member-database
    volumes:
      - ./backend/:/opt/app/
      - ./public:/opt/app/public/uploads
    ports:
      - 1337:1337
    networks:
      - web
      - intern
    depends_on:
      - cvd-member-database
  
  cvd-member-database:
    container_name: cvd-member-database
    image: postgres:14.2-alpine
    restart: unless-stopped
    # env_file:
    #   - .env
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - cvd-member-database-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - intern
  
  cvd-member-redis:
    container_name: cvd-member-redis
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
    command: redis-server --requirepass ${REDIS_PASS}
    networks:
      - intern
    volumes:
      - cvd-member-redis-volume:/var/lib/redis/data
  
  cvd-member-nuxt:
    container_name: cvd-member-nuxt
    build:
      context: ./frontend
      dockerfile: Dockerfile.Development
    restart: always
    environment:
      - API_BASE_URL_WEB=${API_BASE_URL_WEB}
      - BROWSER_BASE_URL=${BROWSER_BASE_URL}
      - CHOKIDAR_USEPOLLING=true
    ports:
      - 3000:3000
      - 24678:24678
    volumes:
      - ./frontend:/usr/src/nuxt-app
      - 'frontend_node_modules:/usr/src/nuxt-app/node_modules'
    depends_on:
      - cvd-member-strapi

networks:
  intern:
  web:
    external: true

volumes:
  cvd-member-database-volume:
  frontend_node_modules:
  cvd-member-redis-volume:
  # backend_node_modules: